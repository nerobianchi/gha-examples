name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "**/*.gitattributes"
      - "**/*.gitignore"
      - "**/*.md"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FEATURE: ghaexamples
  ARTIFACTORY_DEV_REPO: dev_art_repo
  ARTIFACTORY_REPO: art_repo

jobs:
  deploy:
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        environment: [staging, preprod, production]
    uses: ./.github/workflows/deploy-action.yml
    with:
      environment: ${{ matrix.environment }}

  # build:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.repository.fork == false || github.event_name == 'pull_request' }}
  #   outputs:
  #     version-number: "${{ github.event_name == 'pull_request' && 'pr-' || '' }}${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.generate-version.outputs.version-number }}"
  #     ### OneEKS ###
  #     # The following variables can be moved to docker-build as output because it has `uses` field.
  #     image-name: ${{ env.FEATURE }}${{ github.event_name == 'pull_request' && '/prs' || '' }}
  #     docker-repository: ${{ github.event_name == 'pull_request' && env.ARTIFACTORY_DEV_REPO || env.ARTIFACTORY_REPO }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Build application
  #       run: echo "Building application..."

  #     - name: Generate version
  #       id: generate-version
  #       uses: github-actions/generate-version@v1
  #       with:
  #         prefix: "1.1"

  # deploy-qa:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Deploy to QA
  #       run: echo "Deploying to QA environment..."
        
  #     - run: echo ${{ needs.build.outputs.version-number }}
  #     - run: echo ${{ needs.build.outputs.image-name }}
  #     - run: echo ${{ needs.build.outputs.docker-repository }}

  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: deploy-qa
  #   steps:
  #     - name: Deploy to Staging
  #       run: echo "Deploying to Staging environment..."

  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: deploy-staging
  #   environment:
  #     name: production  # Links to the 'production' environment
  #   steps:
  #     - name: Deploy to Production
  #       run: echo "Deploying to Production environment..."
